From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: killerprojecte <admin@fastmcmirror.org>
Date: Sat, 8 Jul 2023 11:07:58 +0800
Subject: [PATCH] Fix BukkitScheduler#runTaskTimer


diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 1b24396d007ef845c85e320a26b46b0925c505bf..f9e3c20b952b4d5fcb12d8907adf29ad6902c6a0 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -543,17 +543,30 @@ public class CraftScheduler implements BukkitScheduler {
         if (owner == null) {
             owner = new FakePlugin();
         }
+        boolean repeat = task.getPeriod() != CraftTask.NO_REPEATING;
         if (!this.isAsyncScheduler && !task.isSync()) {
-            long mdelay = (long) (delay / 20.0 * 1000.0);
+            long millis_delay = (long) (delay / 20.0 * 1000.0);
             ScheduledTask scheduledTask;
-            if (mdelay <= 0) {
-                scheduledTask = Bukkit.getAsyncScheduler().runNow(owner, stask -> {
-                    task.run();
-                });
+            if (millis_delay <= 0) {
+                if (repeat) {
+                    scheduledTask = Bukkit.getAsyncScheduler().runAtFixedRate(owner, stask -> {
+                        task.run();
+                    }, 0, (long) (task.getPeriod() / 20.0 * 1000.0), TimeUnit.MILLISECONDS);
+                } else {
+                    scheduledTask = Bukkit.getAsyncScheduler().runNow(owner, stask -> {
+                        task.run();
+                    });
+                }
             } else {
-                scheduledTask = Bukkit.getAsyncScheduler().runDelayed(owner, stask -> {
-                    task.run();
-                }, mdelay, TimeUnit.MILLISECONDS);
+                if (repeat) {
+                    scheduledTask = Bukkit.getAsyncScheduler().runAtFixedRate(owner, stask -> {
+                        task.run();
+                    }, millis_delay, (long) (task.getPeriod() / 20.0 * 1000.0), TimeUnit.MILLISECONDS);
+                } else {
+                    scheduledTask = Bukkit.getAsyncScheduler().runDelayed(owner, stask -> {
+                        task.run();
+                    }, millis_delay, TimeUnit.MILLISECONDS);
+                }
             }
             task.setScheduledTask(scheduledTask);
             taskMap.put(task.getTaskId(), scheduledTask);
@@ -562,13 +575,25 @@ public class CraftScheduler implements BukkitScheduler {
         // Paper end
         ScheduledTask scheduledTask;
         if (delay <= 0) {
-            scheduledTask = Bukkit.getGlobalRegionScheduler().run(owner, stask -> {
-                task.run();
-            });
+            if (repeat) {
+                scheduledTask = Bukkit.getGlobalRegionScheduler().runAtFixedRate(owner, stask -> {
+                    task.run();
+                }, delay, task.getPeriod());
+            } else {
+                scheduledTask = Bukkit.getGlobalRegionScheduler().run(owner, stask -> {
+                    task.run();
+                });
+            }
         } else {
-            scheduledTask = Bukkit.getGlobalRegionScheduler().runDelayed(owner, stask -> {
-                task.run();
-            }, delay);
+            if (repeat) {
+                scheduledTask = Bukkit.getGlobalRegionScheduler().runAtFixedRate(owner, stask -> {
+                   task.run();
+                }, delay, task.getPeriod());
+            } else {
+                scheduledTask = Bukkit.getGlobalRegionScheduler().runDelayed(owner, stask -> {
+                    task.run();
+                }, delay);
+            }
         }
         task.setScheduledTask(scheduledTask);
         taskMap.put(task.getTaskId(), scheduledTask);
