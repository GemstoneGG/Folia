From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: killerprojecte <admin@fastmcmirror.org>
Date: Mon, 19 Jun 2023 22:35:27 +0800
Subject: [PATCH] Cache world data when world loading


diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
index ee9f5e1f3387998cddbeb1dc6dc6e2b1ea7cd670..a16948f585e7c9abcf38e59dd41be625aae487b9 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
@@ -3,6 +3,7 @@ package io.papermc.paper.threadedregions;
 import ca.spottedleaf.concurrentutil.scheduler.SchedulerThreadPool;
 import ca.spottedleaf.concurrentutil.util.TimeUtil;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.CachedWorldData;
 import io.papermc.paper.util.TickThread;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
@@ -66,6 +67,8 @@ public final class TickRegionScheduler {
         tickThreadRunner.currentTickingRegion = region;
         if (region != null) {
             tickThreadRunner.currentTickingWorldRegionizedData = region.regioniser.world.worldRegionData.get();
+            //CachedWorldData.update(region.regioniser.world.getWorld().getName(), tickThreadRunner.currentTickingWorldRegionizedData);
+            //MinecraftServer.LOGGER.info("Cached World " + region.regioniser.world.getWorld().getName() + " data when initializing it");
         } else {
             tickThreadRunner.currentTickingWorldRegionizedData = null;
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d5d05bcbbbc883d9ff6d545af9f72ac58f09fb0e..501036ae2827018b4d01aa1aea5e122b3aba152b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -99,6 +99,7 @@ import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.event.server.ServerLoadEvent;
 import org.slf4j.Logger;
@@ -614,6 +615,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             collideTeam.setSeeFriendlyInvisibles(false); // Because we want to mimic them not being on a team at all
         }
         // Paper end
+        // DirtyFolia start
+        for (ServerLevel level : this.getAllLevels()) {
+            for (Chunk chunk : level.getWorld().getLoadedChunks()) {
+                Bukkit.getRegionScheduler().run(new FakePlugin(), level.getWorld(), chunk.getX(), chunk.getZ(), scheduledTask -> {
+                    CachedWorldData.update(level.getWorld().getName(), level.worldRegionData.get());
+                });
+            }
+            MinecraftServer.LOGGER.info("World " + level.getWorld().getName() + " data status: " + (CachedWorldData.get(level.getWorld().getName()) == null ? "(Unavailable)" : "(Cached)"));
+        }
+        // DirtyFolia end
 
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 98b69acf7691c79bfae86d7415b30916c9370261..d8eb83caeff2a9a0313bb7b64ede6b8d1455f2a6 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -5,6 +5,7 @@ import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import dev.rgbmc.folia.CachedWorldData;
+import dev.rgbmc.folia.FakePlugin;
 import io.papermc.paper.util.MCUtil;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -76,6 +77,7 @@ import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
