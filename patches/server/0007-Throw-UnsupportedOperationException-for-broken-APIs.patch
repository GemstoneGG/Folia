From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@users.noreply.github.com>
Date: Mon, 20 Mar 2023 02:07:43 -0700
Subject: [PATCH] Throw UnsupportedOperationException() for broken APIs


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 26d332a46556416bb70b6276786b43e1a8ec8449..11ff1bc559316da426070867f045720ebd8c1962 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2875,6 +2875,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public final void executeMidTickTasks() {
+        if (true) return; // Folia - disable mid-tick task execution
         org.spigotmc.AsyncCatcher.catchOp("mid tick chunk task execution");
         io.papermc.paper.threadedregions.RegionizedWorldData worldData = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData(); // Folia - region threading
         long startTime = System.nanoTime();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ac38ba1f697351f9787c758ae5c206c49899c3c5..f1e6b90260e0244a6ec9268544fe48449a5a4c80 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1264,6 +1264,7 @@ public final class CraftServer implements Server {
 
     @Override
     public World createWorld(WorldCreator creator) {
+        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1405,6 +1406,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean unloadWorld(World world, boolean save) {
+        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot unload a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         if (world == null) {
             return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 13190c4265bb83e682dede7e982ebcd19d80e334..4ccdcdc78c86a698d555b6dc53bbd8668ca41d39 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -1,11 +1,12 @@
 package org.bukkit.craftbukkit.scoreboard;
 
 import com.google.common.base.Function;
-import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
+import java.util.Collection;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
+import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
@@ -43,18 +44,20 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
     @Override
     public CraftObjective registerNewObjective(String name, Criteria criteria, net.kyori.adventure.text.Component displayName, RenderType renderType) throws IllegalArgumentException {
+        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
         if (displayName == null) {
             displayName = net.kyori.adventure.text.Component.empty();
         }
-        Preconditions.checkArgument(name != null, "Objective name cannot be null");
-        Preconditions.checkArgument(criteria != null, "Criteria cannot be null");
-        Preconditions.checkArgument(renderType != null, "RenderType cannot be null");
-        Preconditions.checkArgument(name.length() <= Short.MAX_VALUE, "The name '%s' is longer than the limit of 32767 characters (%s)", name, name.length());
-        Preconditions.checkArgument(this.board.getObjective(name) == null, "An objective of name '%s' already exists", name);
+        Validate.notNull(name, "Objective name cannot be null");
+        Validate.notNull(criteria, "Criteria cannot be null");
+        Validate.notNull(displayName, "Display name cannot be null");
+        Validate.notNull(renderType, "RenderType cannot be null");
+        Validate.isTrue(name.length() <= Short.MAX_VALUE, "The name '" + name + "' is longer than the limit of 32767 characters");
+        Validate.isTrue(board.getObjective(name) == null, "An objective of name '" + name + "' already exists");
         // Paper start - the block comment from the old registerNewObjective didnt cause a conflict when rebasing, so this block wasn't added to the adventure registerNewObjective
-        if (((CraftCriteria) criteria).criteria != net.minecraft.world.scores.criteria.ObjectiveCriteria.DUMMY && !this.registeredGlobally) {
+        if (((CraftCriteria) criteria).criteria != net.minecraft.world.scores.criteria.ObjectiveCriteria.DUMMY && !registeredGlobally) {
             net.minecraft.server.MinecraftServer.getServer().server.getScoreboardManager().registerScoreboardForVanilla(this);
-            this.registeredGlobally = true;
+            registeredGlobally = true;
         }
         // Paper end
         net.minecraft.world.scores.Objective objective = board.addObjective(name, ((CraftCriteria) criteria).criteria, io.papermc.paper.adventure.PaperAdventure.asVanilla(displayName), CraftScoreboardTranslations.fromBukkitRender(renderType));
@@ -84,17 +87,17 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public Objective getObjective(String name) throws IllegalArgumentException {
-        Preconditions.checkArgument(name != null, "Objective name cannot be null");
+        Validate.notNull(name, "Name cannot be null");
         net.minecraft.world.scores.Objective nms = this.board.getObjective(name);
         return nms == null ? null : new CraftObjective(this, nms);
     }
 
     @Override
     public ImmutableSet<Objective> getObjectivesByCriteria(String criteria) throws IllegalArgumentException {
-        Preconditions.checkArgument(criteria != null, "Criteria name cannot be null");
+        Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
-        for (net.minecraft.world.scores.Objective netObjective : this.board.getObjectives()) {
+        for (net.minecraft.world.scores.Objective netObjective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
             CraftObjective objective = new CraftObjective(this, netObjective);
             if (objective.getCriteria().equals(criteria)) {
                 objectives.add(objective);
@@ -105,7 +108,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public ImmutableSet<Objective> getObjectivesByCriteria(Criteria criteria) throws IllegalArgumentException {
-        Preconditions.checkArgument(criteria != null, "Criteria cannot be null");
+        Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
         for (net.minecraft.world.scores.Objective netObjective : this.board.getObjectives()) {
@@ -120,12 +123,18 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public ImmutableSet<Objective> getObjectives() {
-        return ImmutableSet.copyOf(Iterables.transform(this.board.getObjectives(), (Function<net.minecraft.world.scores.Objective, Objective>) input -> new CraftObjective(CraftScoreboard.this, input)));
+        return ImmutableSet.copyOf(Iterables.transform((Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives(), new Function<net.minecraft.world.scores.Objective, Objective>() {
+
+            @Override
+            public Objective apply(net.minecraft.world.scores.Objective input) {
+                return new CraftObjective(CraftScoreboard.this, input);
+            }
+        }));
     }
 
     @Override
     public Objective getObjective(DisplaySlot slot) throws IllegalArgumentException {
-        Preconditions.checkArgument(slot != null, "Display slot cannot be null");
+        Validate.notNull(slot, "Display slot cannot be null");
         net.minecraft.world.scores.Objective objective = this.board.getDisplayObjective(CraftScoreboardTranslations.fromBukkitSlot(slot));
         if (objective == null) {
             return null;
@@ -135,17 +144,17 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public ImmutableSet<Score> getScores(OfflinePlayer player) throws IllegalArgumentException {
-        Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
+        Validate.notNull(player, "OfflinePlayer cannot be null");
 
         return this.getScores(player.getName());
     }
 
     @Override
     public ImmutableSet<Score> getScores(String entry) throws IllegalArgumentException {
-        Preconditions.checkArgument(entry != null, "Entry cannot be null");
+        Validate.notNull(entry, "Entry cannot be null");
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
-        for (net.minecraft.world.scores.Objective objective : this.board.getObjectives()) {
+        for (net.minecraft.world.scores.Objective objective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
             scores.add(new CraftScore(new CraftObjective(this, objective), entry));
         }
         return scores.build();
@@ -153,23 +162,23 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public void resetScores(OfflinePlayer player) throws IllegalArgumentException {
-        Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
+        Validate.notNull(player, "OfflinePlayer cannot be null");
 
         this.resetScores(player.getName());
     }
 
     @Override
     public void resetScores(String entry) throws IllegalArgumentException {
-        Preconditions.checkArgument(entry != null, "Entry cannot be null");
+        Validate.notNull(entry, "Entry cannot be null");
 
-        for (net.minecraft.world.scores.Objective objective : this.board.getObjectives()) {
+        for (net.minecraft.world.scores.Objective objective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
             this.board.resetPlayerScore(entry, objective);
         }
     }
 
     @Override
     public Team getPlayerTeam(OfflinePlayer player) throws IllegalArgumentException {
-        Preconditions.checkArgument(player != null, "OfflinePlayer cannot be null");
+        Validate.notNull(player, "OfflinePlayer cannot be null");
 
         PlayerTeam team = this.board.getPlayersTeam(player.getName());
         return team == null ? null : new CraftTeam(this, team);
@@ -177,7 +186,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public Team getEntryTeam(String entry) throws IllegalArgumentException {
-        Preconditions.checkArgument(entry != null, "Entry cannot be null");
+        Validate.notNull(entry, "Entry cannot be null");
 
         PlayerTeam team = this.board.getPlayersTeam(entry);
         return team == null ? null : new CraftTeam(this, team);
@@ -185,7 +194,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public Team getTeam(String teamName) throws IllegalArgumentException {
-        Preconditions.checkArgument(teamName != null, "Team name cannot be null");
+        Validate.notNull(teamName, "Team name cannot be null");
 
         PlayerTeam team = this.board.getPlayerTeam(teamName);
         return team == null ? null : new CraftTeam(this, team);
@@ -193,14 +202,21 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public ImmutableSet<Team> getTeams() {
-        return ImmutableSet.copyOf(Iterables.transform(this.board.getPlayerTeams(), (Function<PlayerTeam, Team>) input -> new CraftTeam(CraftScoreboard.this, input)));
+        return ImmutableSet.copyOf(Iterables.transform((Collection<PlayerTeam>) this.board.getPlayerTeams(), new Function<PlayerTeam, Team>() {
+
+            @Override
+            public Team apply(PlayerTeam input) {
+                return new CraftTeam(CraftScoreboard.this, input);
+            }
+        }));
     }
 
     @Override
     public Team registerNewTeam(String name) throws IllegalArgumentException {
-        Preconditions.checkArgument(name != null, "Team name cannot be null");
-        Preconditions.checkArgument(name.length() <= Short.MAX_VALUE, "Team name '%s' is longer than the limit of 32767 characters (%s)", name, name.length());
-        Preconditions.checkArgument(this.board.getPlayerTeam(name) == null, "Team name '%s' is already in use", name);
+        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        Validate.notNull(name, "Team name cannot be null");
+        Validate.isTrue(name.length() <= Short.MAX_VALUE, "Team name '" + name + "' is longer than the limit of 32767 characters");
+        Validate.isTrue(this.board.getPlayerTeam(name) == null, "Team name '" + name + "' is already in use");
 
         return new CraftTeam(this, this.board.addPlayerTeam(name));
     }
@@ -225,7 +241,8 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public void clearSlot(DisplaySlot slot) throws IllegalArgumentException {
-        Preconditions.checkArgument(slot != null, "Slot cannot be null");
+        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        Validate.notNull(slot, "Slot cannot be null");
         this.board.setDisplayObjective(CraftScoreboardTranslations.fromBukkitSlot(slot), null);
     }
 
@@ -236,19 +253,19 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     // Paper start
     @Override
     public ImmutableSet<Score> getScoresFor(org.bukkit.entity.Entity entity) throws IllegalArgumentException {
-        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+        Validate.notNull(entity, "Entity cannot be null");
         return this.getScores(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
 
     @Override
     public void resetScoresFor(org.bukkit.entity.Entity entity) throws IllegalArgumentException {
-        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+        Validate.notNull(entity, "Entity cannot be null");
         this.resetScores(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
 
     @Override
     public Team getEntityTeam(org.bukkit.entity.Entity entity) throws IllegalArgumentException {
-        Preconditions.checkArgument(entity != null, "Entity cannot be null");
+        Validate.notNull(entity, "Entity cannot be null");
         return this.getEntryTeam(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 7674939964894a56ce495e47d400cbf12cd0475b..071289fe33f444b903b61d6ec34c9ca4873c9ac5 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import com.google.common.base.Preconditions;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -17,6 +16,7 @@ import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.WeakCollection;
 import org.bukkit.entity.Player;
@@ -42,6 +42,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     @Override
     public CraftScoreboard getNewScoreboard() {
+        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
         org.spigotmc.AsyncCatcher.catchOp("scoreboard creation"); // Spigot
         CraftScoreboard scoreboard = new CraftScoreboard(new ServerScoreboard(this.server));
         // Paper start
@@ -68,7 +69,8 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     // CraftBukkit method
     public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) throws IllegalArgumentException {
-        Preconditions.checkArgument(bukkitScoreboard instanceof CraftScoreboard, "Cannot set player scoreboard to an unregistered Scoreboard");
+        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        Validate.isTrue(bukkitScoreboard instanceof CraftScoreboard, "Cannot set player scoreboard to an unregistered Scoreboard");
 
         CraftScoreboard scoreboard = (CraftScoreboard) bukkitScoreboard;
         net.minecraft.world.scores.Scoreboard oldboard = this.getPlayerBoard(player).getHandle();
