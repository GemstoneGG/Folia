From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: killerprojecte <admin@fastmcmirror.org>
Date: Fri, 30 Jun 2023 19:38:16 +0800
Subject: [PATCH] Cache world data when world loading


diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
index ee9f5e1f3387998cddbeb1dc6dc6e2b1ea7cd670..70cc11031e5ed5d9c4c5e68aca9a1b795f4912ab 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegionScheduler.java
@@ -3,6 +3,7 @@ package io.papermc.paper.threadedregions;
 import ca.spottedleaf.concurrentutil.scheduler.SchedulerThreadPool;
 import ca.spottedleaf.concurrentutil.util.TimeUtil;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.CachedWorldData;
 import io.papermc.paper.util.TickThread;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
@@ -66,6 +67,8 @@ public final class TickRegionScheduler {
         tickThreadRunner.currentTickingRegion = region;
         if (region != null) {
             tickThreadRunner.currentTickingWorldRegionizedData = region.regioniser.world.worldRegionData.get();
+            CachedWorldData.update(region.regioniser.world.getWorld().getName(), tickThreadRunner.currentTickingWorldRegionizedData);
+            //MinecraftServer.LOGGER.info("Cached World " + region.regioniser.world.getWorld().getName() + " data when initializing it");
         } else {
             tickThreadRunner.currentTickingWorldRegionizedData = null;
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d5d05bcbbbc883d9ff6d545af9f72ac58f09fb0e..c7b280fef686edf86cacc4667ee52d056c39055d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -99,6 +99,7 @@ import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.event.server.ServerLoadEvent;
 import org.slf4j.Logger;
@@ -614,6 +615,22 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             collideTeam.setSeeFriendlyInvisibles(false); // Because we want to mimic them not being on a team at all
         }
         // Paper end
+        // DirtyFolia start
+        for (ServerLevel level : this.getAllLevels()) {
+            Chunk[] chunks = new Chunk[]{level.getWorld().getLoadedChunks()[0]};
+            if (chunks.length == 0) {
+                level.getWorld().loadChunk(0, 0);
+                Chunk loadChunk = level.getWorld().getChunkAt(0,0);
+                chunks = new Chunk[]{loadChunk};
+            }
+            for (Chunk chunk : chunks) {
+                Bukkit.getRegionScheduler().run(new FakePlugin(), level.getWorld(), chunk.getX(), chunk.getZ(), scheduledTask -> {
+                    CachedWorldData.update(level.getWorld().getName(), level.worldRegionData.get());
+                });
+            }
+            MinecraftServer.LOGGER.info("World " + level.getWorld().getName() + " data status: " + (CachedWorldData.get(level.getWorld().getName()) == null ? "(Unavailable)" : "(Cached)"));
+        }
+        // DirtyFolia end
 
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
